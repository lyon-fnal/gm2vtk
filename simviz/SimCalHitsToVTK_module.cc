////////////////////////////////////////////////////////////////////////
// Class:       SimCalHitsToVTK
// Module Type: analyzer
// File:        SimCalHitsToVTK_module.cc
//
// Generated at Tue Oct 27 23:04:39 2015 by Adam Lyon using artmod
// from cetpkgsupport v1_08_04.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"

#include "gm2viz/adapter/CatalystAdapter_service.hh"

#include "gm2ringsim/calo/CaloArtRecord.hh"

#include "vtkPolyData.h"
#include "vtkFloatArray.h"
#include "vtkStringArray.h"
#include "vtkPointData.h"

namespace gm2viz {
  class SimCalHitsToVTK;
}

const std::string vtkDataName = "simCalHits";

class gm2viz::SimCalHitsToVTK : public art::EDAnalyzer {
public:
  explicit SimCalHitsToVTK(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  SimCalHitsToVTK(SimCalHitsToVTK const &) = delete;
  SimCalHitsToVTK(SimCalHitsToVTK &&) = delete;
  SimCalHitsToVTK & operator = (SimCalHitsToVTK const &) = delete;
  SimCalHitsToVTK & operator = (SimCalHitsToVTK &&) = delete;

  // Required functions.
  void beginJob() override;
  void analyze(art::Event const & e) override;


private:

  std::string caloArtRecordInputTag_;
  
};


gm2viz::SimCalHitsToVTK::SimCalHitsToVTK(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  caloArtRecordInputTag_( p.get<std::string>("caloArtRecordInputTag", "artg4:calorimeter") )
{}

void gm2viz::SimCalHitsToVTK::beginJob() {
  // Get the CatalystAdapter service and register
  art::ServiceHandle<CatalystAdapter> adapter;
  adapter->registerVTKData(vtkDataName);
}

void gm2viz::SimCalHitsToVTK::analyze(art::Event const & e)
{
  // Initialize VTK objects
  
  // Positions and cells
  vtkSmartPointer<vtkPoints>      pts    = vtkSmartPointer<vtkPoints>::New();
  vtkSmartPointer<vtkCellArray>   verts  = vtkSmartPointer<vtkCellArray>::New();
  
  // Energy
  vtkSmartPointer<vtkFloatArray>  energy = vtkSmartPointer<vtkFloatArray>::New();
  energy->SetName("energy");
  
  // time
  vtkSmartPointer<vtkFloatArray>  hitTime = vtkSmartPointer<vtkFloatArray>::New();
  hitTime->SetName("hitTime");
  
  // Parent ID
  vtkSmartPointer<vtkIntArray>    parentID = vtkSmartPointer<vtkIntArray>::New();
  parentID->SetName("parentID");
  
  // Track ID
  vtkSmartPointer<vtkIntArray>    trackID = vtkSmartPointer<vtkIntArray>::New();
  trackID->SetName("trackID");
  
  // Calorimeter Number
  vtkSmartPointer<vtkIntArray>    caloNum = vtkSmartPointer<vtkIntArray>::New();
  caloNum->SetName("caloNum");
  
  // turn
  vtkSmartPointer<vtkIntArray>    turn = vtkSmartPointer<vtkIntArray>::New();
  turn->SetName("turn");
  
  // Particle name
  vtkSmartPointer<vtkStringArray>  particleName = vtkSmartPointer<vtkStringArray>::New();
  particleName->SetName("particleName");
  
  // Momentum
  vtkSmartPointer<vtkFloatArray>  p = vtkSmartPointer<vtkFloatArray>::New();
  p->SetName("p");
  p->SetNumberOfComponents(3);  // each element is a 3-vector

  // Get calorimeter hits
  auto caloVectorH = e.getValidHandle<gm2ringsim::CaloArtRecordCollection>( caloArtRecordInputTag_ );
  
  if ( caloVectorH.isValid() ) {
    auto caloVector = *caloVectorH;
    
    // Run all hits  set the points first
    for ( auto aHit : caloVector ) {
      
      // Set the position
      vtkIdType pid[1];  // Make a one element array
      pid[0] = pts->InsertNextPoint(aHit.x, aHit.y, aHit.z);  // Returns the position in the point array
      
      // Make the vertex cell
      verts->InsertNextCell(1, pid); // The 1 indicates a one element cell
      
      // Fill arrays
      energy->InsertNextValue( aHit.energy );
      hitTime->InsertNextValue( aHit.time );
      parentID->InsertNextValue( aHit.parent_ID );
      trackID->InsertNextValue( aHit.trackID );
      turn->InsertNextValue( aHit.turn );
      caloNum->InsertNextValue( aHit.caloNum );
      particleName->InsertNextValue( aHit.particle_name );
      p->InsertNextTuple3( aHit.px, aHit.py, aHit.pz );
    }
  }
  
  // Make the polydata
  vtkSmartPointer<vtkPolyData> grid = vtkSmartPointer<vtkPolyData>::New();
  grid->SetPoints(pts);
  grid->SetVerts(verts);
  grid->GetPointData()->AddArray(energy);
  grid->GetPointData()->AddArray(hitTime);
  grid->GetPointData()->AddArray(parentID);
  grid->GetPointData()->AddArray(trackID);
  grid->GetPointData()->AddArray(turn);
  grid->GetPointData()->AddArray(caloNum);
  grid->GetPointData()->AddArray(particleName);
  grid->GetPointData()->AddArray(p);
  
  // Give this to the adapter service
  art::ServiceHandle<CatalystAdapter> adapter;
  adapter->giveVTKData(vtkDataName, grid);
}

DEFINE_ART_MODULE(gm2viz::SimCalHitsToVTK)
